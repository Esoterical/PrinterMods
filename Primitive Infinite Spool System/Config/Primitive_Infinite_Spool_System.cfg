#Variable Store
[gcode_macro _FILAMENT_VARS]
variable_activespool: None
variable_count: 0
variable_jam_retry: 0
variable_infinitespool: 1
variable_bowden_length: "test"
gcode: # Gcode section left intentionally blank. Do not disturb.

    {action_respond_info(" Running the VARIABLE_STORE macro does nothing")}


#Hardware

# Primative Control Unit
[mcu pcu]
serial: /dev/serial/by-id/usb-Klipper_stm32f072xb_4B0039000851324757373520-if00
restart_method: command

# Aliases for easier configuration.

[board_pins pcu_alias]
mcu: pcu
aliases:
aliases_both_sides:
  encoder=gpio22,
  speed_control=gpio25,
aliases_left_side:
  left_pre_stepper=gpio27,
  left_post_stepper=gpio7,
  left_step=gpio10,
  left_dir=gpio9,
  left_enable=gpio8,
  left_uart=gpio20,
aliases_right_side:
  right_pre_stepper=gpio5,
  right_post_stepper=gpio3,
  right_step=gpio16,
  right_dir=gpio15,
  right_enable=gpio14,
  right_uart=gpio17,

[board_pins extruder_alias]
mcu: fycombo
aliases:
  pre_extruder=PA3,
  post_extruder=PA2,

[extruder_stepper left_filament_stepper]
extruder: 
step_pin: pcu:left_step
dir_pin: !pcu:left_dir
enable_pin: !pcu:left_enable
microsteps: 16
rotation_distance: 22.7409
gear_ratio: 50:10 # CW2 gear ratio
microsteps: 16
full_steps_per_rotation: 200

[tmc2209 extruder_stepper left_filament_stepper]
uart_pin: pcu:left_uart
run_current: 0.4
#hold_current: 0.500
stealthchop_threshold: 0
interpolate: True



[extruder_stepper right_filament_stepper]
extruder: 
step_pin: pcu:right_step
dir_pin: !pcu:right_dir
enable_pin: !pcu:right_enable
microsteps: 16
rotation_distance: 22.7409
gear_ratio: 50:10 # CW2 gear ratio
microsteps: 16
full_steps_per_rotation: 200

[tmc2209 extruder_stepper right_filament_stepper]
uart_pin: pcu:right_uart
run_current: 0.6
#hold_current: 0.500
stealthchop_threshold: 0
interpolate: True


[filament_switch_sensor left_pre_stepper]
switch_pin: ^pcu:left_pre_stepper
pause_on_runout: False
insert_gcode:
  {% set OriginalState = printer.print_stats.state %}
  {% if not (OriginalState == "paused" or OriginalState == "printing") %}
    RESPOND MSG="Left filament inserted"
    {% for step in range(50) %}
      M400 # Wait for buffer to clear
      _PRELOAD_FILAMENT SIDE=LEFT
    {% endfor %}
    FORCE_MOVE STEPPER='extruder_stepper left_filament_stepper' DISTANCE=-10 VELOCITY=20
    {% if printer['gcode_macro _FILAMENT_VARS'].activespool == None %}
      ACTIVATE_LEFT_SPOOL
    {% endif %}
  {% endif %}
runout_gcode:
     {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
     {% set CURRENT_TEMP = printer['extruder'].target %} 
     {% set OriginalState = printer.print_stats.state %}
     {% if OriginalState == "printing" and  printer['filament_switch_sensor left_post_stepper'].filament_detected and not  printer['filament_switch_sensor right_post_stepper'].filament_detected %}
      #  PAUSE
      #  {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool and printer['filament_switch_sensor right_pre_stepper'].filament_detected %}
      #   T0 # Swap to right spool
      #   PURGE_FILAMENT TEMP={CURRENT_TEMP} LENGTH=50
      #   G4 P2000
      #   SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      #   RESUME
      # {% else %}
      #   RESPOND TYPE=error msg="FILAMENT RUNOUT !!"
      # {% endif %}
      RESPOND MSG="Left Pre-Stepper Sensor detected runout. Disabling SFS"
      G92 E0
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}


[filament_switch_sensor left_post_stepper]
switch_pin: ^pcu:left_post_stepper
pause_on_runout: False


[filament_switch_sensor right_pre_stepper]
switch_pin: ^pcu:right_pre_stepper
pause_on_runout: False
insert_gcode:
  {% set OriginalState = printer.print_stats.state %}
  {% if not (OriginalState == "paused" or OriginalState == "printing") %}
    RESPOND MSG="Right filament inserted"
    {% for step in range(50) %}
      M400 # Wait for buffer to clear
      _PRELOAD_FILAMENT SIDE=RIGHT
    {% endfor %}
    FORCE_MOVE STEPPER='extruder_stepper right_filament_stepper' DISTANCE=-10 VELOCITY=20
    {% if printer['gcode_macro _FILAMENT_VARS'].activespool == None %}
      ACTIVATE_RIGHT_SPOOL
    {% endif %}
  {% endif %}
runout_gcode:
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    {% set CURRENT_TEMP = printer['extruder'].target %} 
    {% set OriginalState = printer.print_stats.state %}
     {% if OriginalState == "printing" and  printer['filament_switch_sensor right_post_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
      #  PAUSE
      #  {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool and printer['filament_switch_sensor left_pre_stepper'].filament_detected %}
      #   T0 # Swap to left spool
      #   PURGE_FILAMENT TEMP={CURRENT_TEMP} LENGTH=50
      #   G4 P2000
      #   SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      #   RESUME
      # {% else %}
      #   RESPOND TYPE=error msg="FILAMENT RUNOUT !!"
      # {% endif %}
      RESPOND MSG="Right Pre-Stepper Sensor detected runout. Disabling SFS"
      G92 E0
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}

[filament_switch_sensor right_post_stepper]
switch_pin: ^pcu:right_post_stepper
pause_on_runout: False

[filament_switch_sensor pre_extruder]
switch_pin: ^fycombo:pre_extruder
pause_on_runout: False
runout_gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  {% set CURRENT_TEMP = printer['extruder'].target %} 
  {% set OriginalState = printer.print_stats.state %}

  {% if OriginalState == "printing" %}
   PAUSE
    {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool %}
      GO_TO_PURGE
      {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %}
        RESPOND MSG="Changing to Right"
        ACTIVATE_RIGHT_SPOOL
      {% elif printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}  
        RESPOND MSG="Changing to Left"
        ACTIVATE_LEFT_SPOOL
      {% endif %}
      INFSPOOL_LOAD_FILAMENT
      G4 P2000
      SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      RESUME
    {% else %}
      RESPOND TYPE=error msg="!! FILAMENT RUNOUT !!"
    {% endif %}
  {% endif %}

[filament_switch_sensor post_extruder]
switch_pin: ^fycombo:post_extruder
pause_on_runout: False


[gcode_button speed_control]
pin: ^pcu:speed_control
press_gcode:
  # Feed Faster, Lower RD
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 0.95 * printer.configfile.config['extruder_stepper left_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=left_filament_stepper DISTANCE={LOWRD}
  {% endif %}
  {% if printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 0.95 * printer.configfile.config['extruder_stepper right_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=right_filament_stepper DISTANCE={LOWRD}
  {% endif %}
release_gcode:
  # Feed Slower, Higher RD
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 1.05 * printer.configfile.config['extruder_stepper left_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=left_filament_stepper DISTANCE={LOWRD}
  {% endif %}
  {% if printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    {% set LOWRD = 1.05 * printer.configfile.config['extruder_stepper right_filament_stepper'].rotation_distance | float %}
    SET_EXTRUDER_ROTATION_DISTANCE EXTRUDER=right_filament_stepper DISTANCE={LOWRD}
  {% endif %}

[filament_motion_sensor encoder_sensor]
detection_length: 10
#   The minimum length of filament pulled through the sensor to trigger
#   a state change on the switch_pin
#   Default is 7 mm.
extruder: extruder
switch_pin: ^pcu:encoder
pause_on_runout: False
runout_gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  {% set CURRENT_TEMP = printer['extruder'].target %} 
  {% set OriginalState = printer.print_stats.state %}

  {% if OriginalState == "printing" %}
   PAUSE
    {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool and ((printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' and printer['filament_switch_sensor right_pre_stepper'].filament_detected) or (printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' and printer['filament_switch_sensor left_pre_stepper'].filament_detected))  %}
      #T0 # Swap to left spool
      RESPOND TYPE=error msg="!! JAM DETECTED !!"
      RESPOND TYPE=error msg="Swapping Spool and disabling futher Infinite Spool"
      SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=infinitespool VALUE=0
      GO_TO_PURGE
      REMOVE_FILAMENT
      {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %}
        RESPOND MSG="Changing to Right Spool"
        ACTIVATE_RIGHT_SPOOL
      {% elif printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}  
        RESPOND MSG="Changing to Left Spool"
        ACTIVATE_LEFT_SPOOL
      {% endif %}
      INFSPOOL_LOAD_FILAMENT
      G4 P2000
       RESPOND MSG="Spool Swapped, make sure to TOGGLE_INFINITE_SPOOL_MODE to enable Infinite Spool again"
      SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      RESUME
    {% elif printer["gcode_macro _FILAMENT_VARS"].infinitespool and printer["gcode_macro _FILAMENT_VARS"].jam_retry  %}
      RESPOND TYPE=error msg="!! JAM DETECTED !!"
       RESPOND TYPE=error msg="Infinite Spool Enabled, but spool already swapped"
        RESPOND TYPE=error msg="!! INTERVENTION REQUIRED !!"
    {% else %}
      RESPOND TYPE=error msg="!! JAM DETECTED !!"
    {% endif %}
  {% endif %}

[gcode_macro TOGGLE_INFINITE_SPOOL_MODE]
gcode:
  {% if printer["gcode_macro _FILAMENT_VARS"].infinitespool %}
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=infinitespool VALUE=0
    RESPOND MSG="Infinite Spool mode disabled"
  {% else %}
    SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=infinitespool VALUE=1
    RESPOND MSG="Infinite Spool mode enabled"
  {% endif %}

#insert_gcode:
#event_delay: 5.0
#pause_delay:

# Macros
# The filament movement macros have multiple parts, a Main macro that you call which has a loop in it.
# In this loop it will call a secondary macro that does the sensor check and small G1 movement.
# This is because checking a sensor/whatever is done *once* at the activation of a macro
# therefore you can't keep checking a sensor from within a loop in the same macro, but if you
# are calling a *second* macro from the loop, then this second macro will check the sensor each time
# it activates. The loop also has a fixed number of iterations so once the second macro has detected
# its desired state it stops doing anything and the main loop just "runs out" of iterations as I can't
# find a way for the second macro to influence the first macro to cancel a loop early.
#
# The process isn't perfect (due to klipper command queueing and stuff) so you need to have "wiggle" room
# to allow for timing variations between "triggered" and action. But with enough phyisical space for the 
# filament to move after triggering and using small movement motions each time it works well enough.
# 
# At the end of each loop/macro pair there is a call to a third "check" macro which does a final check
# of the sensor just to make sure the loop terminated properly and didn't just "run out" of loop iterations
# without actually completing (ie. if filament gets jammed or the bowden comes loose).

[gcode_macro SELECT_ACTIVE_SPOOL]
# Automatically selects the spool stepper based on which side has filament at the "post feed stepper" switch
# I have this as a delayed_gcode to run each time Klipper starts, and also in my start_print gcode just to double check.
# Also worth
gcode:
  {% if printer['filament_switch_sensor left_post_stepper'].filament_detected and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT SPOOL, BOTH SENSORS TRIGGERED !!"
    #M112 #Emergency Stop
  {% elif printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    ACTIVATE_LEFT_SPOOL
  {% elif printer['filament_switch_sensor right_post_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    ACTIVATE_RIGHT_SPOOL
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
    #M112 #Emergency Stop
  {% endif %}

[gcode_macro ACTIVATE_LEFT_SPOOL]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=right_filament_stepper MOTION_QUEUE=
  SYNC_EXTRUDER_MOTION EXTRUDER=left_filament_stepper MOTION_QUEUE=extruder 
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE="'left'"
  RESPOND MSG="Left Spool Activated"

[gcode_macro ACTIVATE_RIGHT_SPOOL]
gcode:
  SYNC_EXTRUDER_MOTION EXTRUDER=left_filament_stepper MOTION_QUEUE=
  SYNC_EXTRUDER_MOTION EXTRUDER=right_filament_stepper MOTION_QUEUE=extruder 
  SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE="'right'"
  RESPOND MSG="Right Spool Activated"

[delayed_gcode INITIAL_ACTIVE_SPOOL] # This will set the current active spool (if filament is in the correct configuration) on boot/restart of Klpper
initial_duration: 1
gcode:
   SELECT_ACTIVE_SPOOL
	
[gcode_macro HARD_CHECK_FILAMENT_LOADED]
# A hard check to make sure you have filament at the extruder. I have this in my START_PRINT after the LOAD_FILAMENT
# macro as a final check and it E-STOP's out if filament isn't detected.
gcode:
	{% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
		RESPOND TYPE=error msg="!! Filament not at extruder. Run ACTIVATE_side_SPOOL before starting print !!"
		CANCEL_PRINT
        M400
	{% endif %}

[gcode_macro REMOVE_FILAMENT] #Removes filament from system, automatic, based on current active spool
gcode:
  {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
  SET_VELOCITY_LIMIT ACCEL=50
  M83
  {% if printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E-200 F2000
    G1 E-1300 F6000
    M400
  {% endif %}
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    RESPOND MSG="Removing filament from LEFT side..."
    #{% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    #SET_VELOCITY_LIMIT ACCEL=500
    LFS_DISABLE
   # M83
    #G4 P2000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # wait for buffer to clear
        #_REMOVE_LEFT_FILAMENT
        _REMOVING_FILAMENT SIDE=LEFT
    {% endfor %}
    #SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    #_REMOVE_LEFT_FILAMENT_CHECK
    _REMOVING_FILAMENT_CHECK SIDE=LEFT
    LFS_ENABLE
  
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    RESPOND MSG="Removing filament from RIGHT side..."
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    #SET_VELOCITY_LIMIT ACCEL=500
    RFS_DISABLE
    #M83
    #G4 P3000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400
       # _REMOVE_RIGHT_FILAMENT
        _REMOVING_FILAMENT SIDE=RIGHT
    {% endfor %}
    #SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    #_REMOVE_RIGHT_FILAMENT_CHECK
    _REMOVING_FILAMENT SIDE=RIGHT
    RFS_ENABLE

  {% else %}
    RESPOND TYPE=error msg="!! NO SPOOL ACTIVE !!"
  {% endif %}
  SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}

[gcode_macro _REMOVING_FILAMENT] 
gcode:
  {% if params.SIDE == 'LEFT' and printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    G1 E-10 F6000 
  {% elif params.SIDE == 'RIGHT' and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    G1 E-10 F6000 
  {% endif %}

[gcode_macro _REMOVING_FILAMENT_CHECK] 
gcode:
  {% if params.SIDE == 'LEFT' and printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH LEFT SIDE FILAMENT REMOVAL !!"
  {% elif params.SIDE == 'RIGHT' and printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH RIGHT SIDE FILAMENT REMOVAL !!"
  {% else %}
    RESPOND MSG="FIlament Removed"
  {% endif %}
  
# [gcode_macro _REMOVE_LEFT_FILAMENT] 
# gcode:
#   {% if printer['filament_switch_sensor post_extruder'].filament_detected and printer['filament_switch_sensor left_post_stepper'].filament_detected %}
#     G1 E-200 F2000
#     G1 E-1100 F6000
#     G4 P2000
#   {% elif printer['filament_switch_sensor left_post_stepper'].filament_detected %}
#     G1 E-5 F6000            # retract 10mm
#     G4 P100 #wait 200ms  
#   {% endif %}

# [gcode_macro _REMOVE_LEFT_FILAMENT_CHECK] 
# gcode:
#   {% if printer['filament_switch_sensor left_post_stepper'].filament_detected %}
#     RESPOND TYPE=error msg="!! FAULT WITH LEFT SIDE FILAMENT REMOVAL !!"
#   {% else %}
#     RESPOND MSG="Left Side Removed"
#   {% endif %}

# [gcode_macro _REMOVE_RIGHT_FILAMENT]
# gcode:
#   {% if printer['filament_switch_sensor post_extruder'].filament_detected and  printer['filament_switch_sensor right_post_stepper'].filament_detected %}
#     M400
#     G1 E-200 F2000
#     G1 E-1100 F6000
#     #G4 P2000
#   {% elif printer['filament_switch_sensor right_post_stepper'].filament_detected %}
#     M400
#     G1 E-5 F6000          # retract 10mm
#     #G4 P100 #wait 200ms  
#   {% endif %}

# [gcode_macro _REMOVE_RIGHT_FILAMENT_CHECK]
# gcode:
#   {% if printer['filament_switch_sensor right_post_stepper'].filament_detected %}
#     RESPOND TYPE=error msg="!! FAULT WITH RIGHT SIDE FILAMENT REMOVAL !!"
#   {% else %}
#     RESPOND MSG="Right Side Removed"
#   {% endif %}

    
[gcode_macro _PRELOAD_FILAMENT]
gcode:
  {% if params.SIDE == 'LEFT' and not printer['filament_switch_sensor left_post_stepper'].filament_detected %}
    FORCE_MOVE STEPPER='extruder_stepper left_filament_stepper' DISTANCE=5 VELOCITY=20
  {% elif params.SIDE == 'RIGHT' and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    FORCE_MOVE STEPPER='extruder_stepper right_filament_stepper' DISTANCE=5 VELOCITY=20
  {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode:
  #{% set TOTAL_DISTANCE 0 | int %}
  #SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE={TOTAL_DISTANCE}
  {% if printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND MSG="Filament Already Loaded"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Loading Filament"
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL=2000
    M83
    #G4 P2000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _LOADING_FILAMENT
        #_COUNT_LOADING_FILAMENT
    {% endfor %}
    #_READ_TOTAL_DISTANCE
    SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    _LOADING_FILAMENT_CHECK
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}
  

[gcode_macro _LOADING_FILAMENT]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    G1 E300 F1000
    G1 E1000 F6000
    #G4 P2000
  {% elif not printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E10 F6000             # extrude 10mm
    #G4 P100 #wait 200ms
  {% endif %}
  
[gcode_macro _LOADING_FILAMENT_CHECK]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
    # M112
  {% else %}
    RESPOND MSG="Filament detected at extruder, doing final push to tip" 
    G1 E25 F300
    RESPOND MSG="Filament Loaded" 
  {% endif %}
  

[gcode_macro MEASURE_BOWDEN]
gcode:
  #{% set TOTAL_DISTANCE 0 | int %}
  #SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=activespool VALUE={TOTAL_DISTANCE}
  {% if  printer["gcode_macro _FILAMENT_VARS"].activespool == None %}
    RESPOND MSG="No spool active. Activate a spool first"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Removing Filament to starting location"
	REMOVE_FILAMENT
	RESPOND MSG="Starting Measurement"
	
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL=2000
	SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_length VALUE=0
    M83
    #G4 P2000 #Initial pause to stop piled-together commands
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _MEASURING_BOWDEN
        #_COUNT_LOADING_FILAMENT
    {% endfor %}
    #_READ_TOTAL_DISTANCE
    SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
    _MEASURING_BOWDEN_CHECK
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}
  

[gcode_macro _MEASURING_BOWDEN]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    G1 E10 F6000             # extrude 10mm
	{% set MEASUREMENT = printer["gcode_macro _FILAMENT_VARS"].bowden_length + 10 %}
	SET_GCODE_VARIABLE MACRO=_FILAMENT_VARS VARIABLE=bowden_length VALUE={MEASUREMENT}
    #G4 P100 #wait 200ms
  {% endif %}
  
[gcode_macro _MEASURING_BOWDEN_CHECK]
gcode:
  {% if not printer['filament_switch_sensor post_extruder'].filament_detected %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
    # M112
  {% else %}
    RESPOND MSG="Bowden length is "{printer["gcode_macro _FILAMENT_VARS"].bowden_length}
  {% endif %}
  
[gcode_macro INFSPOOL_LOAD_FILAMENT]
gcode:
  {% if printer['filament_switch_sensor pre_extruder'].filament_detected %}
    RESPOND MSG="Filament Already Loaded"
  {% elif (printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected) or (printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected) %}
    RESPOND MSG="Loading Filament"
    GO_TO_PURGE
    {% set CURRENT_ACCEL = printer.toolhead.max_accel %} 
    SET_VELOCITY_LIMIT ACCEL=2000
    M83
    M400
    #Initial fast load
    {% if not printer['filament_switch_sensor pre_extruder'].filament_detected and not printer['filament_switch_sensor left_post_stepper'].filament_detected and not printer['filament_switch_sensor right_post_stepper'].filament_detected %}
    	G1 E300 F1000
    	G1 E1000 F6000
    {% endif %}
    #Small load loop
    {% set step = 0 %}
    {% for step in range(350) %}
        M400 # Wait for buffer to clear
        _INFSPOOL_LOADING_FILAMENT
    {% endfor %}
    _INFSPOOL_LOADING_FILAMENT_PURGE
    _INFSPOOL_RESUME_PRINT ACCEL={CURRENT_ACCEL}
  {% else %}
    RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
  {% endif %}
  
[gcode_macro _INFSPOOL_LOADING_FILAMENT]
gcode:
  {% if not printer['filament_switch_sensor pre_extruder'].filament_detected %}
    G1 E10 F6000             # extrude 10mm
  {% endif %}

[gcode_macro _INFSPOOL_LOADING_FILAMENT_PURGE]
gcode:
  {% if printer['filament_switch_sensor pre_extruder'].filament_detected %}
    RESPOND MSG="Filament detected at pre-extruder, pushing to post-extruder"
    M83
    G1 E120 F300
    NOZZLE_PARK
  {% endif %}

[gcode_macro _INFSPOOL_RESUME_PRINT]
gcode:
   {% set CURRENT_ACCEL = params.ACCEL|default(1000)|float %}
   {% if not printer['filament_switch_sensor pre_extruder'].filament_detected %}
     RESPOND TYPE=error msg="!! FAULT WITH EXTRUDER FILAMENT LOADING !!"
   {% else %}
      G4 P2000
      SET_VELOCITY_LIMIT ACCEL={CURRENT_ACCEL}
      RESUME
   {% endif %}

[gcode_macro LFS_ENABLE] ; Add this to PRINT_START
description: Enable Left Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=left_pre_stepper ENABLE=1

[gcode_macro LFS_DISABLE] ; Add this to PRINT_START
description: Disable Left Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=left_pre_stepper ENABLE=0
  
[gcode_macro RFS_ENABLE] ; Add this to PRINT_START
description: Enable Right Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=right_pre_stepper ENABLE=1

[gcode_macro RFS_DISABLE] ; Add this to PRINT_START
description: Disable Right Filament Sensor
gcode:
  SET_FILAMENT_SENSOR SENSOR=right_pre_stepper ENABLE=0

[gcode_macro ENABLE_RUNOUT_SENSOR]
gcode:
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    LFS_ENABLE
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    RFS_ENABLE
  {% else %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT ACTIVE SPOOL, NO RUNOUT SENSOR ENABLED !!"
  {% endif %}

[gcode_macro DISABLE_RUNOUT_SENSOR]
gcode:
  {% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
    LFS_DISABLE
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
    RFS_DISABLE
  {% else %}
    RESPOND TYPE=error msg="!! UNABLE TO DETECT ACTIVE SPOOL, NO RUNOUT SENSOR ENABLED !!"
  {% endif %}
	

# Toolchanging
# Possible use for simple two-spool multi-colour

[gcode_macro T0] #Left Spool
gcode:
  #{% if printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' %}
  {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'left' %}
    RESPOND MSG="T0 Already Active"
    LOAD_FILAMENT
  {% elif printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor right_pre_stepper'].filament_detected %}
    RESPOND MSG="Changing to T0"
    REMOVE_FILAMENT
    ACTIVATE_LEFT_SPOOL
    LOAD_FILAMENT
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}

[gcode_macro T1] #Right Spool
gcode:
  #{% if printer['extruder_stepper right_filament_stepper'].motion_queue == 'extruder' %}
  {% if printer["gcode_macro _FILAMENT_VARS"].activespool == 'right' %}
    RESPOND MSG="T1 Already Active"
    LOAD_FILAMENT
  {% elif printer['extruder_stepper left_filament_stepper'].motion_queue == 'extruder' and printer['filament_switch_sensor left_pre_stepper'].filament_detected %}
    RESPOND MSG="Changing to T1"
    REMOVE_FILAMENT
    ACTIVATE_RIGHT_SPOOL
    LOAD_FILAMENT
  {% else %}
    RESPOND TYPE=error msg="!! UNKNOWN SPOOL CONFIGURATION !!"
  {% endif %}
